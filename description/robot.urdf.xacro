<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="robot">

    <xacro:arg name="use_ros2_control" default="true"/>

    <!-- Macros for Inertials -->
    <xacro:macro name="inertial_sphere" params="mass radius *origin">
        <inertial>
            <xacro:insert_block name="origin"/>
            <mass value="${mass}" />
            <inertia ixx="${(2/5) * mass * (radius*radius)}" ixy="0.0" ixz="0.0"
                    iyy="${(2/5) * mass * (radius*radius)}" iyz="0.0"
                    izz="${(2/5) * mass * (radius*radius)}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="inertial_box" params="mass x y z *origin">
        <inertial>
            <xacro:insert_block name="origin"/>
            <mass value="${mass}" />
            <inertia ixx="${(1/12) * mass * (y*y+z*z)}" ixy="0.0" ixz="0.0"
                    iyy="${(1/12) * mass * (x*x+z*z)}" iyz="0.0"
                    izz="${(1/12) * mass * (x*x+y*y)}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="inertial_cylinder" params="mass length radius *origin">
        <inertial>
            <xacro:insert_block name="origin"/>
            <mass value="${mass}" />
            <inertia ixx="${(1/12) * mass * (3*radius*radius + length*length)}" ixy="0.0" ixz="0.0"
                    iyy="${(1/12) * mass * (3*radius*radius + length*length)}" iyz="0.0"
                    izz="${(1/2) * mass * (radius*radius)}" />
        </inertial>
    </xacro:macro>

    <!-- Materials -->
    <material name="white">
        <color rgba="1 1 1 1" />
    </material>

    <material name="blue">
        <color rgba="0.2 0.2 1 1" />
    </material>

    <material name="black">
        <color rgba="0 0 0 1" />
    </material>

    <material name="red">
        <color rgba="1 0 0 1" />
    </material>

    <material name="orange">
        <color rgba="1 0.3 0.1 1" />
    </material>

    <!-- Base Link -->
    <link name="base_link"/>
    
    <!-- Base Footprint Link -->
    <joint name="base_footprint_joint" type="fixed">
        <parent link="base_link"/>
        <child link="base_footprint"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
    </joint>

    <link name="base_footprint"/>

    <!-- Chassis Link -->
    <joint name="chassis_joint" type="fixed">
        <parent link="base_link"/>
        <child link="chassis"/>
        <origin xyz="-0.1 0 0"/>
    </joint>

    <link name="chassis">
        <visual>
            <!-- First Deck -->
            <origin xyz="0.15 0 0.01"/>
            <geometry>
                <box size="0.3 0.3 0.01"/>
            </geometry>
            <material name="orange"/>
        </visual>
        <visual>
            <!-- Second Deck -->
            <origin xyz="0.15 0 0.11"/> <!-- Adjusted for height of first deck plus poles -->
            <geometry>
                <box size="0.3 0.3 0.01"/>
            </geometry>
            <material name="orange"/>
        </visual>
        <visual>
            <!-- Pole 1 -->
            <origin xyz="0.27 0.13 0.06"/> <!-- Centered and at mid height between decks -->
            <geometry>
                <cylinder radius="0.01" length="0.1"/> <!-- Adjust length to span between decks -->
            </geometry>
            <material name="orange"/>
        </visual>
        <visual>
            <!-- Pole 2 -->
            <origin xyz="0.27 -0.13 0.06"/> <!-- Centered and at mid height between decks -->
            <geometry>
                <cylinder radius="0.01" length="0.1"/>
            </geometry>
            <material name="orange"/>
        </visual>
        <visual>
            <!-- Pole 3 -->
            <origin xyz="0.02 0 0.06"/> <!-- Centered and at mid height between decks -->
            <geometry>
                <cylinder radius="0.01" length="0.1"/>
            </geometry>
            <material name="orange"/>
        </visual>
        <visual>
            <!-- Tall Pole 1 -->
            <origin xyz="0.27 0.13 0.42"/> <!-- Centered and at mid height between decks -->
            <geometry>
                <cylinder radius="0.01" length="0.6"/> <!-- Adjust length to span between decks -->
            </geometry>
            <material name="orange"/>
        </visual>
        <visual>
            <!-- Tall Pole 2 -->
            <origin xyz="0.27 -0.13 0.42"/> <!-- Centered and at mid height between decks -->
            <geometry>
                <cylinder radius="0.01" length="0.6"/>
            </geometry>
            <material name="orange"/>
        </visual>
        <visual>
            <!-- Tall Pole 3 -->
            <origin xyz="0.02 0 0.42"/> <!-- Centered and at mid height between decks -->
            <geometry>
                <cylinder radius="0.01" length="0.6"/>
            </geometry>
            <material name="orange"/>
        </visual>
        <visual>
            <!-- Third Deck -->
            <origin xyz="0.15 0 0.73"/> <!-- Adjusted for height of first deck plus poles -->
            <geometry>
                <box size="0.3 0.3 0.01"/>
            </geometry>
            <material name="orange"/>
        </visual>
        <collision>
            <origin xyz="0.15 0 0.075"/>
            <geometry>
                <box size="0.3 0.3 0.15"/>
            </geometry>
        </collision>
        <xacro:inertial_box mass="0.5" x="0.3" y="0.3" z="0.15">
            <origin xyz="0.15 0 0.075" rpy="0 0 0"/>
        </xacro:inertial_box>
    </link>

    <gazebo reference="chassis">
        <material>Gazebo/White</material>
    </gazebo>

    <!-- Left Wheel Link -->
    <joint name="left_wheel_joint" type="continuous">
        <parent link="base_link"/>
        <child link="left_wheel"/>
        <origin xyz="0 0.175 0" rpy="-${pi/2} 0 0"/>
        <axis xyz="0 0 1"/>
    </joint>

    <link name="left_wheel">
        <visual>
            <geometry>
                <cylinder radius="0.05" length="0.04"/>
            </geometry>
            <material name="blue"/>
        </visual>
        <collision>
            <geometry>
                <sphere radius="0.05"/>
            </geometry>
        </collision>
        <xacro:inertial_cylinder mass="0.1" length="0.04" radius="0.05">
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </xacro:inertial_cylinder>
    </link>

    <gazebo reference="left_wheel">
        <material>Gazebo/Black</material>
    </gazebo>

    <!-- Right Wheel Link -->
    <joint name="right_wheel_joint" type="continuous">
        <parent link="base_link"/>
        <child link="right_wheel"/>
        <origin xyz="0 -0.175 0" rpy="${pi/2} 0 0"/>
        <axis xyz="0 0 -1"/>
    </joint>

    <link name="right_wheel">
        <visual>
            <geometry>
                <cylinder radius="0.05" length="0.04"/>
            </geometry>
            <material name="blue"/>
        </visual>
        <collision>
            <geometry>
                <sphere radius="0.05"/>
            </geometry>
        </collision>
        <xacro:inertial_cylinder mass="0.1" length="0.04" radius="0.05">
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </xacro:inertial_cylinder>
    </link>

    <gazebo reference="right_wheel">
        <material>Gazebo/Black</material>
    </gazebo>

    <!-- Caster Wheel Link -->
    <joint name="caster_wheel_joint" type="fixed">
        <parent link="chassis"/>
        <child link="caster_wheel"/>
        <origin xyz="0.24 0 0"/>
    </joint>

    <link name="caster_wheel">
        <visual>
            <origin xyz="0.05 0 -0.025" rpy="-${pi/2} 0 0"/>
            <geometry>
                <cylinder radius="0.025" length="0.02"/>
            </geometry>
            <material name="black"/>
        </visual>
        <collision>
            <geometry>
                <sphere radius="0.05"/>
            </geometry>
        </collision>
        <xacro:inertial_sphere mass="0.1" radius="0.05">
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </xacro:inertial_sphere>
    </link>

    <gazebo reference="caster_wheel">
        <material>Gazebo/Black</material>
        <mu1 value="0.001"/>
        <mu2 value="0.001"/>
    </gazebo>

    <!-- Control Selection -->
    <xacro:if value="$(arg use_ros2_control)">

        <ros2_control name="GazeboSystem" type="system">
            <hardware>
                <plugin>gazebo_ros2_control/GazeboSystem</plugin>
            </hardware>
            <joint name="left_wheel_joint">
                <command_interface name="velocity">
                    <param name="min"></param>
                    <param name="max"></param>
                </command_interface>
                <state_interface name="velocity"/>
                <state_interface name="position"/>
            </joint>
            <joint name="right_wheel_joint">
                <command_interface name="velocity">
                    <param name="min"></param>
                    <param name="max"></param>
                </command_interface>
                <state_interface name="velocity"/>
                <state_interface name="position"/>
            </joint>
        </ros2_control>

        <gazebo>
            <plugin name="gazebo_ros2_control" filename="libgazebo_ros2_control.so">
                <parameters>$(find SLAM_ros2_bot)/config/my_parameters.yaml</parameters>
            </plugin>
        </gazebo>

    </xacro:if>
    <xacro:unless value="$(arg use_ros2_control)">
        
        <gazebo>
            <plugin name="diff_drive" filename="libgazebo_ros_diff_drive.so">

                <!-- wheel information -->
                <left_joint>left_wheel_joint</left_joint>
                <right_joint>right_wheel_joint</right_joint>
                <wheel_separation>0.35</wheel_separation>
                <wheel_diameter>0.1</wheel_diameter>

                <!-- limits -->
                <max_wheel_torque>200</max_wheel_torque>
                <max_wheel_acceleration>10.0</max_wheel_acceleration>

                <!-- Outputs -->
                <odometry_frame>odom</odometry_frame>
                <robot_base_frame>base_link</robot_base_frame>

                <publish_odom>true</publish_odom>
                <publish_odom_tf>true</publish_odom_tf>
                <publish_wheel_tf>true</publish_wheel_tf>

            </plugin>
        </gazebo>
        
    </xacro:unless>

    <!-- Laser Joint and Link -->
    <joint name="laser_joint" type="fixed">
        <parent link="chassis"/>
        <child link="laser_frame"/>
        <origin xyz="0.1 0 0.13" rpy="0 0 0"/>
    </joint>

    <link name="laser_frame">
        <visual>
            <geometry>
                <cylinder radius="0.05" length="0.04"/>
            </geometry>
            <material name="red"/>
        </visual>
        <collision>
            <geometry>
                <cylinder radius="0.05" length="0.04"/>
            </geometry>
        </collision>
        <xacro:inertial_cylinder mass="0.1" length="0.04" radius="0.05">
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </xacro:inertial_cylinder>
    </link>
<!-- 
    <gazebo reference="laser_frame">
        <material>Gazebo/Black</material>
        <sensor type="ray" name="laser">
            <pose>0 0 0 0 0 0</pose>
            <visualize>false</visualize>
            <update_rate>10</update_rate>
            <ray>
                <scan>
                    <horizontal>
                        <samples>360</samples>
                        <resolution>1</resolution>
                        <min_angle>-3.14</min_angle>
                        <max_angle>3.14</max_angle>
                    </horizontal>
                </scan>
                <range>
                    <min>0.3</min>
                    <max>12</max>
                    <resolution>0.01</resolution>
                </range>
            </ray>
            <plugin name="laser_controller" filename="libgazebo_ros_ray_sensor.so">
                <ros>
                    <argument>~/out:=scan</argument>
                </ros>
                <output_type>sensor_msgs/LaserScan</output_type>
                <frameName>laser_frame</frameName>
            </plugin>
        </sensor>
    </gazebo> -->

    <!-- Camera Joint and Link -->
    <!-- <joint name="camera_joint" type="fixed">
        <parent link="chassis"/>
        <child link="camera_link"/>
        <origin xyz="0.305 0 0.12" rpy="0 0 0"/>
    </joint>

    <link name="camera_link">
        <visual>
            <geometry>
                <box size="0.010 0.03 0.03"/>
            </geometry>
            <material name="red"/>
        </visual>
    </link>

    <joint name="camera__optical_joint" type="fixed">
        <parent link="camera_link"/>
        <child link="camera_link_optical"/>
        <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
    </joint>

    <link name="camera_link_optical"/>

    <gazebo reference="camera_link">
        <material>Gazebo/Black</material>
        <sensor type="camera" name="camera">
            <pose>0 0 0 0 0 0</pose>
            <visualize>false</visualize>
            <update_rate>10</update_rate>
            <camera>
                <horizontal_fov>1.089</horizontal_fov>
                <image>
                    <width>640</width>
                    <height>480</height>
                    <format>R8G8B8</format>
                </image>
                <clip>
                    <near>0.05</near>
                    <far>8.0</far>
                </clip>
            </camera>
            <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
                <frameName>camera_link_optical</frameName>
            </plugin>
        </sensor>
    </gazebo> -->
    
<!-- 
      <joint name="camera_joint" type="fixed">
        <parent link="chassis"/>
        <child link="camera_link"/>
        <origin xyz="0.305 0 0.08" rpy="0 0 0"/>
    </joint>

    <link name="camera_link">
        <visual>
            <geometry>
                <box size="0.010 0.03 0.03"/>
            </geometry>
            <material name="red"/>
        </visual>
    </link>


    <joint name="camera_optical_joint" type="fixed">
        <parent link="camera_link"/>
        <child link="camera_link_optical"/>
        <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
    </joint>

    <link name="camera_link_optical"></link>



    <gazebo reference="camera_link">
        <material>Gazebo/Red</material>

        <sensor name="camera" type="depth">
            <pose> 0 0 0 0 0 0 </pose>
            <visualize>true</visualize>
            <update_rate>10</update_rate>
            <camera>
                <horizontal_fov>1.089</horizontal_fov>
                <image>
                    <format>B8G8R8</format>
                    <width>640</width>
                    <height>480</height>
                </image>
                <clip>
                    <near>0.05</near>
                    <far>8.0</far>
                </clip>
            </camera>
            <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
                <frame_name>camera_link_optical</frame_name>
                <min_depth>0.1</min_depth>
                <max_depth>100.0</max_depth>
            </plugin>
        </sensor>
    </gazebo> -->

    <!-- Kinect Link -->
  <link name="kinect_link">
    <visual>
      <geometry>
        <box size="0.05 0.23 0.04"/>
      </geometry>
      <origin xyz="0.13 0 0.26" rpy="0 0 0"/>
      <material name="black"/>
    </visual>
  </link>

  <!-- Kinect Joint -->
  <joint name="kinect_joint" type="fixed">
    <parent link="base_link"/>
    <child link="kinect_link"/>
    <origin xyz="0 0 0.5" rpy="0 0 0"/>
  </joint>

  <!-- Kinect Gazebo Configuration -->
  <gazebo reference="kinect_link">
    <material>Gazebo/Black</material>
    <sensor type="depth" name="kinect_depth">
      <update_rate>30</update_rate>
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <depth>
        <clip>
          <near>0.1</near>
          <far>10.0</far>
        </clip>
        <horizontal_fov>1.047</horizontal_fov>
      </depth>
      <camera>
        <horizontal_fov>1.047</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.1</near>
          <far>10.0</far>
        </clip>
      </camera>
      <plugin name="kinect_camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>kinect_rgb</cameraName>
      </plugin>
      <plugin name="depth_camera_controller" filename="libgazebo_ros_depth_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>kinect_depth</cameraName>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo>
    <plugin name="gazebo_ros_openni_kinect" filename="libgazebo_ros_openni_kinect.so">
      <alwaysOn>true</alwaysOn>
      <updateRate>0.0</updateRate>
      <cameraName>kinect</cameraName>
    </plugin>
  </gazebo>

</robot>
